[
  {
    "description": "Provides a quick method for targeting `border-color` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "border-color",
      "code": "\n  @include directional-property(border, color, $values...);\n",
      "line": {
        "start": 24,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "arglist",
        "name": "values",
        "description": "List of colors, defined as CSS shorthand\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-color(#a60b55 #76cd9c null #e8ae1a);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  border-left-color: #e8ae1a;\n  border-right-color: #76cd9c;\n  border-top-color: #a60b55;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`border-*-color`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_border-color.scss",
      "name": "_border-color.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `border-radius` on both corners on the side of a box.\n\n",
    "commentRange": {
      "start": 3,
      "end": 27
    },
    "context": {
      "type": "mixin",
      "name": "border-top-radius",
      "code": "\n  border-top-left-radius: $radii;\n  border-top-right-radius: $radii;\n",
      "line": {
        "start": 29,
        "end": 32
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "radii"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element-one {\n  @include border-top-radius(5px);\n}\n\n.element-two {\n  @include border-left-radius(3px);\n}"
      },
      {
        "type": "css",
        "code": ".element-one {\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n}\n\n.element-two {\n  border-bottom-left-radius: 3px;\n  border-top-left-radius: 3px;\n}"
      }
    ],
    "output": "`border-radius`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_border-radius.scss",
      "name": "_border-radius.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `border-style` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "border-style",
      "code": "\n  @include directional-property(border, style, $values...);\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "arglist",
        "name": "values",
        "description": "List of border styles, defined as CSS shorthand\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-style(dashed null solid);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  border-bottom-style: solid;\n  border-top-style: dashed;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`border-*-style`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_border-style.scss",
      "name": "_border-style.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `border-width` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "border-width",
      "code": "\n  @include directional-property(border, width, $values...);\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "arglist",
        "name": "values",
        "description": "List of border widths, defined as CSS shorthand\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-width(1em null 20px);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  border-bottom-width: 20px;\n  border-top-width: 1em;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`border-*-width`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_border-width.scss",
      "name": "_border-width.scss"
    }
  },
  {
    "description": "Provides an easy way to include a clearfix for containing floats.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "clearfix",
      "code": "\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n",
      "line": {
        "start": 19,
        "end": 25
      }
    },
    "link": [
      {
        "url": "http://goo.gl/0VEum5",
        "caption": ""
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include clearfix;\n}"
      },
      {
        "type": "css",
        "code": ".element::after {\n  clear: both;\n  content: \"\";\n  display: table;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_clearfix.scss",
      "name": "_clearfix.scss"
    }
  },
  {
    "description": "Truncates text and adds an ellipsis to represent overflow.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "ellipsis",
      "code": "\n  display: inline-block;\n  max-width: $width;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n",
      "line": {
        "start": 23,
        "end": 30
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "width",
        "default": "100%",
        "description": "The `max-width` for the string to respect before being truncated\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include ellipsis;\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  display: inline-block;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "word-wrap"
      }
    ],
    "file": {
      "path": "addons/_ellipsis.scss",
      "name": "_ellipsis.scss"
    }
  },
  {
    "description": "Hides the text in an element, commonly used to show an image instead. Some elements will need block-level styles applied.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "hide-text",
      "code": "\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n",
      "line": {
        "start": 19,
        "end": 23
      }
    },
    "link": [
      {
        "url": "http://goo.gl/EvLRIu",
        "caption": ""
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include hide-text;\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_hide-text.scss",
      "name": "_hide-text.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "margin",
      "code": "\n  @include directional-property(margin, false, $values...);\n",
      "line": {
        "start": 24,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "arglist",
        "name": "values",
        "description": "List of margin values, defined as CSS shorthand\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include margin(null 10px 3em 20vh);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  margin-bottom: 3em;\n  margin-left: 20vh;\n  margin-right: 10px;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`margin`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_margin.scss",
      "name": "_margin.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "padding",
      "code": "\n  @include directional-property(padding, false, $values...);\n",
      "line": {
        "start": 24,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "arglist",
        "name": "values",
        "description": "List of padding values, defined as CSS shorthand\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include padding(12vh null 10px 5%);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  padding-bottom: 10px;\n  padding-left: 5%;\n  padding-top: 12vh;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`padding`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_padding.scss",
      "name": "_padding.scss"
    }
  },
  {
    "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 25
    },
    "context": {
      "type": "mixin",
      "name": "position",
      "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
      "line": {
        "start": 27,
        "end": 49
      }
    },
    "parameter": [
      {
        "type": "position",
        "name": "position",
        "default": "relative",
        "description": "A CSS position value\n"
      },
      {
        "type": "arglist",
        "name": "coordinates",
        "default": "null null null null",
        "description": "List of lengths, defined as CSS shorthand\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include position(absolute, 0 null null 10em);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  left: 10em;\n  position: absolute;\n  top: 0;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "position"
      },
      {
        "type": "function",
        "name": "is-length",
        "external": false
      },
      {
        "type": "function",
        "name": "unpack",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_position.scss",
      "name": "_position.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 27,
            "end": 49
          }
        }
      }
    ]
  },
  {
    "description": "Generates vendor prefixes.\n\n",
    "commentRange": {
      "start": 3,
      "end": 26
    },
    "context": {
      "type": "mixin",
      "name": "prefixer",
      "code": "\n  @each $prefix in $prefixes {\n    #{\"-\" + $prefix + \"-\" + $property}: $value;\n  }\n  #{$property}: $value;\n",
      "line": {
        "start": 28,
        "end": 33
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "property",
        "description": "Property to prefix\n"
      },
      {
        "type": "*",
        "name": "value",
        "description": "Value to use\n"
      },
      {
        "type": "list",
        "name": "prefixes",
        "description": "Vendor prefixes to output\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include prefixer(appearance, none, webkit moz);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}"
      }
    ],
    "author": [
      "Hugo Giraudel"
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_prefixer.scss",
      "name": "_prefixer.scss"
    }
  },
  {
    "description": "Sets the `width` and `height` of the element in one statement.\n\n",
    "commentRange": {
      "start": 3,
      "end": 29
    },
    "context": {
      "type": "mixin",
      "name": "size",
      "code": "\n  @if is-size($height) {\n    height: $height;\n  } @else {\n    @error \"`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.\";\n  }\n\n  @if is-size($width) {\n    width: $width;\n  } @else {\n    @error \"`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.\";\n  }\n",
      "line": {
        "start": 31,
        "end": 43
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "width"
      },
      {
        "type": "number",
        "name": "height",
        "default": "$width"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".first-element {\n  @include size(2em);\n}\n\n.second-element {\n  @include size(auto, 10em);\n}"
      },
      {
        "type": "css",
        "code": ".first-element {\n  width: 2em;\n  height: 2em;\n}\n\n.second-element {\n  width: auto;\n  height: 10em;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "is-size",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "throw": [
      "`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.",
      "`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin."
    ],
    "file": {
      "path": "addons/_size.scss",
      "name": "_size.scss"
    }
  },
  {
    "description": "Provides an easy way to change the `word-wrap` property.\n\n",
    "commentRange": {
      "start": 3,
      "end": 18
    },
    "context": {
      "type": "mixin",
      "name": "word-wrap",
      "code": "\n  overflow-wrap: $wrap;\n  word-wrap: $wrap;\n\n  @if $wrap == break-word {\n    word-break: break-all;\n  } @else {\n    word-break: $wrap;\n  }\n",
      "line": {
        "start": 20,
        "end": 29
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "wrap",
        "default": "break-word",
        "description": "Value for the `word-break` property.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".wrapper {\n  @include word-wrap(break-word);\n}"
      },
      {
        "type": "css",
        "code": ".wrapper {\n  overflow-wrap: break-word;\n  word-break: break-all;\n  word-wrap: break-word;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "word-wrap"
      }
    ],
    "file": {
      "path": "addons/_word-wrap.scss",
      "name": "_word-wrap.scss"
    },
    "usedBy": [
      {
        "description": "Truncates text and adds an ellipsis to represent overflow.\n\n",
        "context": {
          "type": "mixin",
          "name": "ellipsis",
          "code": "\n  display: inline-block;\n  max-width: $width;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n",
          "line": {
            "start": 23,
            "end": 30
          }
        }
      },
      {
        "description": "Provides an easy way to change the `word-wrap` property.\n\n",
        "context": {
          "type": "mixin",
          "name": "word-wrap",
          "code": "\n  overflow-wrap: $wrap;\n  word-wrap: $wrap;\n\n  @if $wrap == break-word {\n    word-break: break-all;\n  } @else {\n    word-break: $wrap;\n  }\n",
          "line": {
            "start": 20,
            "end": 29
          }
        }
      }
    ]
  },
  {
    "description": "Generates an @font-face declaration. Accepts arugments for weight, style, usage with the Rails Asset Pipeline and file formats.\n\n",
    "commentRange": {
      "start": 3,
      "end": 25
    },
    "context": {
      "type": "mixin",
      "name": "font-face",
      "code": "\n\n  $font-url-prefix: font-url-prefixer($asset-pipeline);\n\n  @font-face {\n    font-family: $font-family;\n    font-style: $style;\n    font-weight: $weight;\n\n    src: font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats,\n      $font-url-prefix\n    );\n  }\n",
      "line": {
        "start": 27,
        "end": 50
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "font-family"
      },
      {
        "type": "string",
        "name": "file-path"
      },
      {
        "type": "string",
        "name": "weight",
        "default": "normal"
      },
      {
        "type": "string",
        "name": "asset-pipeline",
        "default": "$asset-pipeline",
        "description": "`$asset-pipeline` is set to `false` by default. You can pass in `true` to use the Rails Asset Pipeline (place the fonts in `app/assets/fonts/')."
      },
      {
        "type": "list",
        "name": "file-formats",
        "default": "$global-font-file-formats",
        "description": "`$global-font-file-formats` is set to `null` by default. Pass a list of file formats to support. E.g. `eot woff2 woff ttf svg`.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "scss"
      },
      {
        "type": "scss",
        "code": "css"
      }
    ],
    "require": [
      {
        "type": "variable",
        "name": "asset-pipeline"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "css3/_font-face.scss",
      "name": "_font-face.scss"
    }
  },
  {
    "description": "Append pseudo-classes to a selector(s).\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "assign-inputs",
      "code": "\n  $list: ();\n\n  @each $input in $inputs {\n    $input: unquote($input);\n    $input: if($pseudo, $input + \":\" + $pseudo, $input);\n    $list: append($list, $input, comma);\n  }\n\n  @return $list;\n",
      "line": {
        "start": 15,
        "end": 25
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "list | string",
        "name": "inputs",
        "description": "A selector, or list of selectors, to apply the pseudo-class to\n"
      },
      {
        "type": "pseudo-class",
        "name": "pseudo",
        "default": "null",
        "description": "The pseudo-class to be appended\n"
      }
    ],
    "return": {
      "type": "list"
    },
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_assign-inputs.scss",
      "name": "_assign-inputs.scss"
    }
  },
  {
    "description": "Checks if a list does not contains a value.\n\n",
    "commentRange": {
      "start": 3,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "contains-falsy",
      "code": "\n  @each $item in $list {\n    @if not $item {\n      @return true;\n    }\n  }\n\n  @return false;\n",
      "line": {
        "start": 12,
        "end": 20
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "list",
        "name": "list",
        "description": "The list to check against.\n"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_contains-falsy.scss",
      "name": "_contains-falsy.scss"
    },
    "usedBy": [
      {
        "description": "Directional-property mixins are shorthands for writing properties like the following\n\n",
        "context": {
          "type": "function",
          "name": "collapse-directionals",
          "code": "\n  $output: null;\n\n  $a: nth($values, 1);\n  $b: if(length($values) < 2, $a, nth($values, 2));\n  $c: if(length($values) < 3, $a, nth($values, 3));\n  $d: if(length($values) < 2, $a, nth($values, if(length($values) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d { $output: $a;          }\n  @else if $a == $c and $b == $d         { $output: $a $b;       }\n  @else if $b == $d                      { $output: $a $b $c;    }\n  @else                                  { $output: $a $b $c $d; }\n\n  @return $output;\n",
          "line": {
            "start": 29,
            "end": 48
          }
        }
      },
      {
        "description": "Output directional properties, for instance `margin`.\n\n",
        "context": {
          "type": "mixin",
          "name": "directional-property",
          "code": "\n  // Property Names\n  $top:    $pre + \"-top\"    + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left:   $pre + \"-left\"   + if($suf, \"-#{$suf}\", \"\");\n  $right:  $pre + \"-right\"  + if($suf, \"-#{$suf}\", \"\");\n  $all:    $pre +             if($suf, \"-#{$suf}\", \"\");\n\n  $values: collapse-directionals($values);\n\n  @if contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n",
          "line": {
            "start": 64,
            "end": 96
          }
        }
      }
    ]
  },
  {
    "description": "Checks if a list contains a value(s).\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "contains",
      "code": "\n  @each $value in $values {\n    @if type-of(index($list, $value)) != \"number\" {\n      @return false;\n    }\n  }\n\n  @return true;\n",
      "line": {
        "start": 15,
        "end": 23
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "list",
        "name": "list",
        "description": "The list to check against.\n"
      },
      {
        "type": "list",
        "name": "values",
        "description": "A single value or list of values to check for.\n"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_contains.scss",
      "name": "_contains.scss"
    },
    "usedBy": [
      {
        "description": "Checks for a valid number.\n\n",
        "context": {
          "type": "function",
          "name": "is-number",
          "code": "\n  @return contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\n",
          "line": {
            "start": 11,
            "end": 13
          }
        }
      },
      {
        "description": "Checks for a valid CSS size.\n\n",
        "context": {
          "type": "function",
          "name": "is-size",
          "code": "\n  @return is-length($value)\n          or contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
          "line": {
            "start": 13,
            "end": 16
          }
        }
      }
    ]
  },
  {
    "description": "Checks for a valid CSS length.\n\n",
    "commentRange": {
      "start": 3,
      "end": 7
    },
    "context": {
      "type": "function",
      "name": "is-length",
      "code": "\n  @return type-of($value) != \"null\" and (str-slice($value + \"\", 1, 4) == \"calc\"\n       or index(auto inherit initial 0, $value)\n       or (type-of($value) == \"number\" and not(unitless($value))));\n",
      "line": {
        "start": 9,
        "end": 13
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "string",
        "name": "value"
      }
    ],
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_is-length.scss",
      "name": "_is-length.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 27,
            "end": 49
          }
        }
      },
      {
        "description": "Checks for a valid CSS size.\n\n",
        "context": {
          "type": "function",
          "name": "is-size",
          "code": "\n  @return is-length($value)\n          or contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
          "line": {
            "start": 13,
            "end": 16
          }
        }
      }
    ]
  },
  {
    "description": "Programatically determines whether a color is light or dark.\n\n",
    "commentRange": {
      "start": 3,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "is-light",
      "code": "\n  $-local-red: red(rgba($hex-color, 1));\n  $-local-green: green(rgba($hex-color, 1));\n  $-local-blue: blue(rgba($hex-color, 1));\n  $-local-lightness: ($-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722) / 255;\n\n  @return $-local-lightness > 0.6;\n",
      "line": {
        "start": 14,
        "end": 21
      }
    },
    "link": [
      {
        "url": "http://goo.gl/Dil4Y9",
        "caption": ""
      }
    ],
    "parameter": [
      {
        "type": "color (hex)",
        "name": "hex-color"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "is-light($color)"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_is-light.scss",
      "name": "_is-light.scss"
    }
  },
  {
    "description": "Checks for a valid number.\n\n",
    "commentRange": {
      "start": 3,
      "end": 9
    },
    "context": {
      "type": "function",
      "name": "is-number",
      "code": "\n  @return contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\n",
      "line": {
        "start": 11,
        "end": 13
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "number",
        "name": "value"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "contains",
        "external": false
      }
    ],
    "group": [
      "undefined"
    ],
    "file": {
      "path": "functions/_is-number.scss",
      "name": "_is-number.scss"
    }
  },
  {
    "description": "Checks for a valid CSS size.\n\n",
    "commentRange": {
      "start": 3,
      "end": 11
    },
    "context": {
      "type": "function",
      "name": "is-size",
      "code": "\n  @return is-length($value)\n          or contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
      "line": {
        "start": 13,
        "end": 16
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "string",
        "name": "value"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "contains",
        "external": false
      },
      {
        "type": "function",
        "name": "is-length",
        "external": false
      }
    ],
    "group": [
      "undefined"
    ],
    "file": {
      "path": "functions/_is-size.scss",
      "name": "_is-size.scss"
    },
    "usedBy": [
      {
        "description": "Sets the `width` and `height` of the element in one statement.\n\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  @if is-size($height) {\n    height: $height;\n  } @else {\n    @error \"`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.\";\n  }\n\n  @if is-size($width) {\n    width: $width;\n  } @else {\n    @error \"`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.\";\n  }\n",
          "line": {
            "start": 31,
            "end": 43
          }
        }
      }
    ]
  },
  {
    "description": "Increments up or down a defined scale and returns an adjusted value. This helps establish consistent measurements and spacial relationships throughout your project. We provide a list of commonly used scales as [pre-defined variables](//github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/settings/_scales.scss).\n\n",
    "commentRange": {
      "start": 3,
      "end": 53
    },
    "context": {
      "type": "function",
      "name": "modular-scale",
      "code": "\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n",
      "line": {
        "start": 55,
        "end": 101
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "increment",
        "description": "How many steps to increment up or down the scale\n"
      },
      {
        "type": "number",
        "name": "value",
        "default": "$modular-scale-base (1em)",
        "description": "The base value the scale starts at\n"
      },
      {
        "type": "number",
        "name": "ratio",
        "default": "$modular-scale-ratio (1.333)",
        "description": "The ratio the scale is built on\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".first-element {\n  font-size: modular-scale(2);\n}\n\n.second-element {\n  margin-right: modular-scale(3, 2em);\n}\n\n.third-element {\n  font-size: modular-scale(3, 1em 1.6em, $major-seventh);\n}\n\n$modular-scale-ratio: 1.2; // change the base ratio\n.fourth-element {\n  font-size: modular-scale(3);\n}"
      },
      {
        "type": "css",
        "code": ".first-element {\n  font-size: 1.77689em;\n}\n\n.second-element {\n  margin-right: 4.73719em;\n}\n\n.third-element {\n  font-size: 3em;\n}\n\n.fourth-element {\n  font-size: 1.728em;\n}"
      }
    ],
    "return": {
      "type": "number"
    },
    "require": [
      {
        "type": "variable",
        "name": "modular-scale-ratio",
        "external": false
      },
      {
        "type": "variable",
        "name": "modular-scale-base",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "functions/_modular-scale.scss",
      "name": "_modular-scale.scss"
    }
  },
  {
    "description": "Mixes a color with black.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "shade",
      "code": "\n  @return mix(#000, $color, $percent);\n",
      "line": {
        "start": 22,
        "end": 24
      }
    },
    "parameter": [
      {
        "type": "color",
        "name": "color"
      },
      {
        "type": "number (percentage)",
        "name": "percent",
        "description": "The amount of black to be mixed in.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  background-color: shade(#ffbb52, 60%);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  background-color: #664a20;\n}"
      }
    ],
    "return": {
      "type": "color"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_shade.scss",
      "name": "_shade.scss"
    }
  },
  {
    "description": "Strips the unit from a number.\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "strip-unit",
      "code": "\n  @return ($value / ($value * 0 + 1));\n",
      "line": {
        "start": 15,
        "end": 17
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "value"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$dimension: strip-unit(10em);"
      },
      {
        "type": "css",
        "code": "$dimension: 10;"
      }
    ],
    "return": {
      "type": "number"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_strip-unit.scss",
      "name": "_strip-unit.scss"
    }
  },
  {
    "description": "Mixes a color with white.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "tint",
      "code": "\n  @return mix(#fff, $color, $percent);\n",
      "line": {
        "start": 22,
        "end": 24
      }
    },
    "parameter": [
      {
        "type": "color",
        "name": "color"
      },
      {
        "type": "number (percentage)",
        "name": "percent",
        "description": "The amount of white to be mixed in.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  background-color: tint(#6ecaa6, 40%);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  background-color: #a8dfc9;\n}"
      }
    ],
    "return": {
      "type": "color"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_tint.scss",
      "name": "_tint.scss"
    }
  },
  {
    "description": "Converts shorthand to the 4-value syntax.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "function",
      "name": "unpack",
      "code": "\n  @if length($shorthand) == 1 {\n    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);\n  } @else if length($shorthand) == 2 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);\n  } @else if length($shorthand) == 3 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);\n  } @else {\n    @return $shorthand;\n  }\n",
      "line": {
        "start": 19,
        "end": 29
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "list",
        "name": "shorthand"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  margin: unpack(1em 2em);\n}"
      },
      {
        "type": "css",
        "code": ".element {\n  margin: 1em 2em 1em 2em;\n}"
      }
    ],
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_unpack.scss",
      "name": "_unpack.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 27,
            "end": 49
          }
        }
      }
    ]
  },
  {
    "description": "Directional-property mixins are shorthands for writing properties like the following\n\n",
    "commentRange": {
      "start": 3,
      "end": 27
    },
    "context": {
      "type": "function",
      "name": "collapse-directionals",
      "code": "\n  $output: null;\n\n  $a: nth($values, 1);\n  $b: if(length($values) < 2, $a, nth($values, 2));\n  $c: if(length($values) < 3, $a, nth($values, 3));\n  $d: if(length($values) < 2, $a, nth($values, if(length($values) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d { $output: $a;          }\n  @else if $a == $c and $b == $d         { $output: $a $b;       }\n  @else if $b == $d                      { $output: $a $b $c;    }\n  @else                                  { $output: $a $b $c $d; }\n\n  @return $output;\n",
      "line": {
        "start": 29,
        "end": 48
      }
    },
    "ignore": [],
    "parameter": [
      {
        "type": "List",
        "name": "values",
        "description": "List of directional values\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include border-style(dotted null);\n    @include margin(null 0 10px);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    border-bottom-style: dotted;\n    border-top-style: dotted;\n    margin-bottom: 10px;\n    margin-left: 0;\n    margin-right: 0;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "contains-falsy",
        "external": false
      }
    ],
    "return": {
      "type": "List"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "helpers/_directional-values.scss",
      "name": "_directional-values.scss"
    },
    "usedBy": [
      {
        "description": "Output directional properties, for instance `margin`.\n\n",
        "context": {
          "type": "mixin",
          "name": "directional-property",
          "code": "\n  // Property Names\n  $top:    $pre + \"-top\"    + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left:   $pre + \"-left\"   + if($suf, \"-#{$suf}\", \"\");\n  $right:  $pre + \"-right\"  + if($suf, \"-#{$suf}\", \"\");\n  $all:    $pre +             if($suf, \"-#{$suf}\", \"\");\n\n  $values: collapse-directionals($values);\n\n  @if contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n",
          "line": {
            "start": 64,
            "end": 96
          }
        }
      }
    ]
  },
  {
    "description": "Output directional properties, for instance `margin`.\n\n",
    "commentRange": {
      "start": 50,
      "end": 62
    },
    "context": {
      "type": "mixin",
      "name": "directional-property",
      "code": "\n  // Property Names\n  $top:    $pre + \"-top\"    + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left:   $pre + \"-left\"   + if($suf, \"-#{$suf}\", \"\");\n  $right:  $pre + \"-right\"  + if($suf, \"-#{$suf}\", \"\");\n  $all:    $pre +             if($suf, \"-#{$suf}\", \"\");\n\n  $values: collapse-directionals($values);\n\n  @if contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n",
      "line": {
        "start": 64,
        "end": 96
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "String",
        "name": "pre",
        "description": "Prefix to use"
      },
      {
        "type": "String",
        "name": "suf",
        "description": "Suffix to use"
      },
      {
        "type": "List",
        "name": "values",
        "description": "List of values\n"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "collapse-directionals",
        "external": false
      },
      {
        "type": "function",
        "name": "contains-falsy",
        "external": false
      }
    ],
    "group": [
      "undefined"
    ],
    "file": {
      "path": "helpers/_directional-values.scss",
      "name": "_directional-values.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for targeting `border-color` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-color",
          "code": "\n  @include directional-property(border, color, $values...);\n",
          "line": {
            "start": 24,
            "end": 26
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `border-style` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-style",
          "code": "\n  @include directional-property(border, style, $values...);\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `border-width` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-width",
          "code": "\n  @include directional-property(border, width, $values...);\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "margin",
          "code": "\n  @include directional-property(margin, false, $values...);\n",
          "line": {
            "start": 24,
            "end": 26
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "padding",
          "code": "\n  @include directional-property(padding, false, $values...);\n",
          "line": {
            "start": 24,
            "end": 26
          }
        }
      }
    ]
  },
  {
    "description": "A global setting to enable or disable the `$asset-pipeline` variable for all functions that accept it.\n\n",
    "commentRange": {
      "start": 3,
      "end": 5
    },
    "context": {
      "type": "variable",
      "name": "asset-pipeline",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 7,
        "end": 7
      }
    },
    "type": "boolean",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "settings/_asset-pipeline.scss",
      "name": "_asset-pipeline.scss"
    },
    "usedBy": [
      {
        "description": "Generates an @font-face declaration. Accepts arugments for weight, style, usage with the Rails Asset Pipeline and file formats.\n\n",
        "context": {
          "type": "mixin",
          "name": "font-face",
          "code": "\n\n  $font-url-prefix: font-url-prefixer($asset-pipeline);\n\n  @font-face {\n    font-family: $font-family;\n    font-style: $style;\n    font-weight: $weight;\n\n    src: font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats,\n      $font-url-prefix\n    );\n  }\n",
          "line": {
            "start": 27,
            "end": 50
          }
        }
      }
    ]
  },
  {
    "description": "A global setting for font file formats for the `font-face` mixin.\n\n",
    "commentRange": {
      "start": 3,
      "end": 10
    },
    "context": {
      "type": "variable",
      "name": "global-font-file-formats",
      "value": "ttf woff2 woff",
      "scope": "default",
      "line": {
        "start": 12,
        "end": 12
      }
    },
    "see": [
      {
        "description": "Generates an @font-face declaration. Accepts arugments for weight, style, usage with the Rails Asset Pipeline and file formats.\n\n",
        "context": {
          "type": "mixin",
          "name": "font-face",
          "code": "\n\n  $font-url-prefix: font-url-prefixer($asset-pipeline);\n\n  @font-face {\n    font-family: $font-family;\n    font-style: $style;\n    font-weight: $weight;\n\n    src: font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats,\n      $font-url-prefix\n    );\n  }\n",
          "line": {
            "start": 27,
            "end": 50
          }
        }
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$global-font-file-formats: woff2 woff;"
      }
    ],
    "type": "list | string",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "settings/_global-font-file-formats.scss",
      "name": "_global-font-file-formats.scss"
    }
  },
  {
    "description": "Global setting for the modular scale ratio\n\n",
    "commentRange": {
      "start": 3,
      "end": 7
    },
    "context": {
      "type": "variable",
      "name": "modular-scale-ratio",
      "value": "$perfect-fourth",
      "scope": "default",
      "line": {
        "start": 9,
        "end": 9
      }
    },
    "see": [
      {
        "description": "Increments up or down a defined scale and returns an adjusted value. This helps establish consistent measurements and spacial relationships throughout your project. We provide a list of commonly used scales as [pre-defined variables](//github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/settings/_scales.scss).\n\n",
        "context": {
          "type": "function",
          "name": "modular-scale",
          "code": "\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n",
          "line": {
            "start": 55,
            "end": 101
          }
        }
      }
    ],
    "type": "number",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "settings/_modular-scale.scss",
      "name": "_modular-scale.scss"
    },
    "usedBy": [
      {
        "description": "Increments up or down a defined scale and returns an adjusted value. This helps establish consistent measurements and spacial relationships throughout your project. We provide a list of commonly used scales as [pre-defined variables](//github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/settings/_scales.scss).\n\n",
        "context": {
          "type": "function",
          "name": "modular-scale",
          "code": "\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n",
          "line": {
            "start": 55,
            "end": 101
          }
        }
      }
    ]
  },
  {
    "description": "Global setting for the modular scale base value\n\n",
    "commentRange": {
      "start": 11,
      "end": 15
    },
    "context": {
      "type": "variable",
      "name": "modular-scale-base",
      "value": "1em",
      "scope": "default",
      "line": {
        "start": 17,
        "end": 17
      }
    },
    "see": [
      {
        "description": "Increments up or down a defined scale and returns an adjusted value. This helps establish consistent measurements and spacial relationships throughout your project. We provide a list of commonly used scales as [pre-defined variables](//github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/settings/_scales.scss).\n\n",
        "context": {
          "type": "function",
          "name": "modular-scale",
          "code": "\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n",
          "line": {
            "start": 55,
            "end": 101
          }
        }
      }
    ],
    "type": "number",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "settings/_modular-scale.scss",
      "name": "_modular-scale.scss"
    },
    "usedBy": [
      {
        "description": "Increments up or down a defined scale and returns an adjusted value. This helps establish consistent measurements and spacial relationships throughout your project. We provide a list of commonly used scales as [pre-defined variables](//github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/settings/_scales.scss).\n\n",
        "context": {
          "type": "function",
          "name": "modular-scale",
          "code": "\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n",
          "line": {
            "start": 55,
            "end": 101
          }
        }
      }
    ]
  }
]
